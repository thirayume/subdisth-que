import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer } from 'recharts';
import { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartConfig } from '@/components/ui/chart';
import { TrendingUp, TrendingDown, BarChart3, Clock, Users, Activity } from 'lucide-react';

interface DataComparisonChartProps {
  realData: {
    avgWaitTime: number;
    completedQueues: number;
    throughput: number;
    label: string;
  };
  simulationData: {
    avgWaitTime: number;
    completedQueues: number;
    throughput: number;
    label: string;
  };
  isSimulationMode: boolean;
}

const DataComparisonChart: React.FC<DataComparisonChartProps> = ({
  realData,
  simulationData,
  isSimulationMode
}) => {
  // Use fallback data when real data is missing
  const effectiveRealData = realData.completedQueues > 0 ? realData : {
    avgWaitTime: 8,
    completedQueues: 15,
    throughput: 3,
    label: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)'
  };

  const chartData = [
    {
      name: '‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ô‡∏≤‡∏ó‡∏µ)',
      real: effectiveRealData.avgWaitTime,
      simulation: simulationData.avgWaitTime,
      unit: '‡∏ô‡∏≤‡∏ó‡∏µ'
    },
    {
      name: '‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à',
      real: effectiveRealData.completedQueues,
      simulation: simulationData.completedQueues,
      unit: '‡∏Ñ‡∏¥‡∏ß'
    },
    {
      name: '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
      real: effectiveRealData.throughput,
      simulation: simulationData.throughput,
      unit: '‡∏Ñ‡∏¥‡∏ß/‡∏£‡∏≠‡∏ö'
    }
  ];

  const getComparisonInsight = () => {
    const waitTimeDiff = simulationData.avgWaitTime - effectiveRealData.avgWaitTime;
    const throughputDiff = simulationData.throughput - effectiveRealData.throughput;
    
    if (Math.abs(waitTimeDiff) < 2 && Math.abs(throughputDiff) < 2) {
      return {
        status: 'similar',
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á',
        icon: Activity
      };
    } else if (waitTimeDiff < 0 && throughputDiff > 0) {
      return {
        status: 'better',
        message: '‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á',
        icon: TrendingUp
      };
    } else {
      return {
        status: 'different',
        message: '‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á',
        icon: TrendingDown
      };
    }
  };

  const insight = getComparisonInsight();
  const InsightIcon = insight.icon;

  const chartConfig: ChartConfig = {
    real: {
      label: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á",
      color: "hsl(var(--primary))",
    },
    simulation: {
      label: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á", 
      color: "hsl(var(--secondary))",
    },
  };

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <BarChart3 className="h-5 w-5" />
          ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á vs ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
          {isSimulationMode && (
            <Badge variant="outline" className="border-blue-300 bg-blue-100 text-blue-700">
              üî¨ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            </Badge>
          )}
        </CardTitle>
        <p className="text-sm text-muted-foreground">
          ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        </p>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Performance Metrics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Card className="border-blue-200 bg-blue-50">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-blue-900">‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</p>
                  <p className="text-lg font-bold text-blue-600">
                    {effectiveRealData.label}: {effectiveRealData.avgWaitTime} ‡∏ô‡∏≤‡∏ó‡∏µ
                  </p>
                  <p className="text-lg font-bold text-blue-800">
                    ‡∏à‡∏≥‡∏•‡∏≠‡∏á: {simulationData.avgWaitTime} ‡∏ô‡∏≤‡∏ó‡∏µ
                  </p>
                  {realData.completedQueues === 0 && (
                    <p className="text-xs text-blue-500 italic">*‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</p>
                  )}
                </div>
                <Clock className="h-8 w-8 text-blue-400" />
              </div>
            </CardContent>
          </Card>
          
          <Card className="border-green-200 bg-green-50">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-green-900">‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à</p>
                  <p className="text-lg font-bold text-green-600">
                    {effectiveRealData.label}: {effectiveRealData.completedQueues}
                  </p>
                  <p className="text-lg font-bold text-green-800">
                    ‡∏à‡∏≥‡∏•‡∏≠‡∏á: {simulationData.completedQueues}
                  </p>
                </div>
                <Users className="h-8 w-8 text-green-400" />
              </div>
            </CardContent>
          </Card>
          
          <Card className="border-orange-200 bg-orange-50">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-orange-900">‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</p>
                  <p className="text-lg font-bold text-orange-600">
                    {effectiveRealData.label}: {effectiveRealData.throughput}
                  </p>
                  <p className="text-lg font-bold text-orange-800">
                    ‡∏à‡∏≥‡∏•‡∏≠‡∏á: {simulationData.throughput}
                  </p>
                </div>
                <Activity className="h-8 w-8 text-orange-400" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Comparison Chart */}
        <div className="bg-white p-4 rounded-lg border">
          <h4 className="font-medium mb-4">‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü</h4>
          <ChartContainer config={chartConfig} className="h-[300px]">
            <BarChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <ChartTooltip 
                content={<ChartTooltipContent 
                  formatter={(value, name) => [
                    `${value} ${chartData.find(d => d.real === value || d.simulation === value)?.unit || ''}`,
                    name === 'real' ? '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á' : '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á'
                  ]}
                />}
              />
              <ChartLegend content={<ChartLegendContent />} />
              <Bar dataKey="real" fill="var(--color-real)" name="real" />
              <Bar dataKey="simulation" fill="var(--color-simulation)" name="simulation" />
            </BarChart>
          </ChartContainer>
        </div>

        {/* Analysis Insights */}
        <div className={`p-4 rounded-lg border ${
          insight.status === 'better' ? 'border-green-200 bg-green-50' :
          insight.status === 'similar' ? 'border-blue-200 bg-blue-50' :
          'border-amber-200 bg-amber-50'
        }`}>
          <div className="flex items-center gap-2 mb-2">
            <InsightIcon className={`h-4 w-4 ${
              insight.status === 'better' ? 'text-green-600' :
              insight.status === 'similar' ? 'text-blue-600' :
              'text-amber-600'
            }`} />
            <h5 className={`font-medium ${
              insight.status === 'better' ? 'text-green-800' :
              insight.status === 'similar' ? 'text-blue-800' :
              'text-amber-800'
            }`}>
              ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            </h5>
          </div>
          <p className={`text-sm ${
            insight.status === 'better' ? 'text-green-700' :
            insight.status === 'similar' ? 'text-blue-700' :
            'text-amber-700'
          }`}>
            {insight.message}
          </p>
          
          {/* Detailed Comparison */}
            <div className="mt-3 grid grid-cols-1 md:grid-cols-3 gap-3 text-xs">
              <div className="bg-white p-2 rounded border">
                <div className="font-medium">‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠</div>
                <div>‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á: {Math.abs(simulationData.avgWaitTime - effectiveRealData.avgWaitTime)} ‡∏ô‡∏≤‡∏ó‡∏µ</div>
              </div>
              <div className="bg-white p-2 rounded border">
                <div className="font-medium">‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à</div>
                <div>‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á: {Math.abs(simulationData.completedQueues - effectiveRealData.completedQueues)} ‡∏Ñ‡∏¥‡∏ß</div>
              </div>
              <div className="bg-white p-2 rounded border">
                <div className="font-medium">‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</div>
                <div>‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á: {Math.abs(simulationData.throughput - effectiveRealData.throughput)} ‡∏Ñ‡∏¥‡∏ß/‡∏£‡∏≠‡∏ö</div>
              </div>
            </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default DataComparisonChart;