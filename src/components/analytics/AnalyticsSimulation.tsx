
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Play, RotateCcw, Trash2, Clock, Users, Activity, AlertTriangle, Database, BarChart3 } from 'lucide-react';
import { toast } from 'sonner';
import { useAnalyticsSimulation } from './hooks/useAnalyticsSimulation';

const AnalyticsSimulation: React.FC = () => {
  const {
    isRunning,
    simulationStats,
    prepareSimulation,
    startTest,
    cleanup,
    loading
  } = useAnalyticsSimulation();

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Activity className="h-5 w-5" />
          ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
          {simulationStats.isSimulationMode && (
            <Badge variant="outline" className="border-orange-300 bg-orange-100 text-orange-700">
              üî¨ Active
            </Badge>
          )}
        </CardTitle>
        <p className="text-sm text-muted-foreground">
          ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏£‡∏¥‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏¥‡∏ß
        </p>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Enhanced Control Buttons */}
        <div className="flex flex-wrap gap-3">
          <Button
            onClick={prepareSimulation}
            disabled={loading || isRunning}
            className="flex items-center gap-2"
          >
            <Database className="h-4 w-4" />
            ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà)
          </Button>
          <Button
            onClick={startTest}
            disabled={loading || !simulationStats.prepared}
            variant="default"
            className="flex items-center gap-2"
          >
            <Play className="h-4 w-4" />
            {isRunning ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...' : '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Test)'}
          </Button>
          <Button
            onClick={cleanup}
            disabled={loading}
            variant="destructive"
            className="flex items-center gap-2"
          >
            <Trash2 className="h-4 w-4" />
            ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)
          </Button>
        </div>

        {/* Simulation Status */}
        {simulationStats.prepared && (
          <>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                <div>
                  <p className="text-sm font-medium text-blue-900">‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                  <p className="text-2xl font-bold text-blue-600">{simulationStats.totalQueues}</p>
                </div>
                <Users className="h-8 w-8 text-blue-500" />
              </div>
              
              <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                <div>
                  <p className="text-sm font-medium text-green-900">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>
                  <p className="text-2xl font-bold text-green-600">{simulationStats.completedQueues}</p>
                </div>
                <Clock className="h-8 w-8 text-green-500" />
              </div>
              
              <div className="flex items-center justify-between p-3 bg-orange-50 rounded-lg">
                <div>
                  <p className="text-sm font-medium text-orange-900">‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</p>
                  <p className="text-2xl font-bold text-orange-600">{simulationStats.avgWaitTime} ‡∏ô‡∏≤‡∏ó‡∏µ</p>
                </div>
                <Activity className="h-8 w-8 text-orange-500" />
              </div>
            </div>

            {/* Queue Type Distribution */}
            {Object.keys(simulationStats.queueTypeDistribution).length > 0 && (
              <div className="p-4 bg-gray-50 rounded-lg">
                <div className="flex items-center gap-2 mb-3">
                  <BarChart3 className="h-4 w-4 text-gray-600" />
                  <h4 className="font-medium text-gray-700">‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏¥‡∏ß</h4>
                </div>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  {Object.entries(simulationStats.queueTypeDistribution).map(([type, count]) => (
                    <div key={type} className="text-center p-2 bg-white rounded border">
                      <div className="text-lg font-bold text-gray-800">{count}</div>
                      <div className="text-xs text-gray-600">{type}</div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </>
        )}

        {/* Status Badges */}
        <div className="flex flex-wrap gap-2">
          {simulationStats.prepared && (
            <Badge variant="secondary">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß</Badge>
          )}
          {isRunning && (
            <Badge variant="default" className="animate-pulse">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á</Badge>
          )}
          {simulationStats.isSimulationMode && (
            <Badge variant="outline" className="border-orange-300 text-orange-700">
              üî¨ ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            </Badge>
          )}
          {simulationStats.completedQueues > 0 && (
            <Badge variant="outline">‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö</Badge>
          )}
        </div>

        {/* Enhanced Instructions */}
        <div className="p-4 bg-gray-50 rounded-lg">
          <h4 className="font-medium mb-2 flex items-center gap-2">
            <AlertTriangle className="h-4 w-4 text-amber-600" />
            ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà):
          </h4>
          <ol className="text-sm space-y-1 text-gray-600">
            <li>1. <strong>‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</strong>: ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á (75-100 ‡∏Ñ‡∏¥‡∏ß) ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏¥‡∏ß</li>
            <li>2. <strong>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö</strong>: ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå (30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏£‡∏≤‡∏´</li>
            <li>3. <strong>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°</strong>: ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°</li>
            <li>4. <strong>‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</strong>: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á</li>
          </ol>
          <div className="mt-2 p-2 bg-amber-50 border border-amber-200 rounded text-xs text-amber-800">
            <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default AnalyticsSimulation;
