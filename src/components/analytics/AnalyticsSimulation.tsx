
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Play, RotateCcw, Trash2, Clock, Users, Activity, AlertTriangle, Database, BarChart3, Pause, ArrowRight } from 'lucide-react';
import { toast } from 'sonner';
import { useAnalyticsSimulationV2 } from './hooks/useAnalyticsSimulationV2';
import { useSimulationDataFixer } from '@/hooks/analytics/useSimulationDataFixer';
import AlgorithmSelector from './AlgorithmSelector';
import DecisionPoint from './DecisionPoint';

const AnalyticsSimulation: React.FC = () => {
  const {
    isRunning,
    simulationStats,
    selectedAlgorithm,
    setSelectedAlgorithm,
    prepareSimulation,
    startProgressiveTest,
    continueToPhase2,
    completeSimulation,
    cleanup,
    loading,
    downloadSimulationLog
  } = useAnalyticsSimulationV2();

  const { fixSimulationTimestamps } = useSimulationDataFixer();

  const [currentMetrics, setCurrentMetrics] = React.useState({
    avgWaitTime: 0,
    throughput: 0,
    completedQueues: 0
  });

  // Capture metrics when we reach decision points
  React.useEffect(() => {
    if (simulationStats.phase === 'PAUSE_30' || simulationStats.phase === 'PAUSE_70') {
      setCurrentMetrics({
        avgWaitTime: simulationStats.avgWaitTime,
        throughput: simulationStats.completedQueues,
        completedQueues: simulationStats.completedQueues
      });
    }
  }, [simulationStats.phase, simulationStats.avgWaitTime, simulationStats.completedQueues]);

  const getPhaseDescription = () => {
    switch (simulationStats.phase) {
      case 'IDLE': return '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô';
      case 'PREPARING': return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...';
      case 'PREPARED': return '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á';
      case 'RUNNING_30': return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á - ‡πÄ‡∏ü‡∏™ 1 (0-30%)';
      case 'PAUSE_30': return '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß - ‡πÄ‡∏ü‡∏™ 1 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (30%)';
      case 'RUNNING_70': return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á - ‡πÄ‡∏ü‡∏™ 2 (30-70%)';
      case 'PAUSE_70': return '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß - ‡πÄ‡∏ü‡∏™ 2 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (70%)';
      case 'RUNNING_100': return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á - ‡πÄ‡∏ü‡∏™‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (70-100%)';
      case 'COMPLETED': return '‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå';
      default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
    }
  };

  const canStartTest = simulationStats.prepared && !isRunning && simulationStats.phase === 'PREPARED';
  const canContinuePhase2 = !isRunning && simulationStats.phase === 'PAUSE_30';
  const canCompleteSimulation = !isRunning && simulationStats.phase === 'PAUSE_70';
  const showResults = simulationStats.phase === 'COMPLETED' && simulationStats.algorithmMetrics.length > 0;

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Activity className="h-5 w-5" />
          ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á (Progressive Testing)
          {simulationStats.isSimulationMode && (
            <Badge variant="outline" className="border-orange-300 bg-orange-100 text-orange-700">
              üî¨ Active
            </Badge>
          )}
          {simulationStats.phase !== 'IDLE' && (
            <Badge variant="secondary">{getPhaseDescription()}</Badge>
          )}
        </CardTitle>
        <p className="text-sm text-muted-foreground">
          ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏£‡∏¥‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏´‡∏¢‡∏∏‡∏î 30% ‡πÅ‡∏•‡∏∞ 70%
        </p>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Progress Bar for Progressive Testing */}
        {simulationStats.phase !== 'IDLE' && (
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <span className="text-sm font-medium">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á</span>
              <span className="text-sm text-muted-foreground">{simulationStats.progress}%</span>
            </div>
            <Progress value={simulationStats.progress} className="w-full" />
            <div className="flex justify-between text-xs text-muted-foreground">
              <span className={simulationStats.progress >= 30 ? 'text-green-600 font-medium' : ''}>30% - ‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à 1</span>
              <span className={simulationStats.progress >= 70 ? 'text-green-600 font-medium' : ''}>70% - ‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à 2</span>
              <span className={simulationStats.progress >= 100 ? 'text-green-600 font-medium' : ''}>100% - ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</span>
            </div>
          </div>
        )}

        {/* Enhanced Control Buttons */}
        <div className="flex flex-wrap gap-3">
          <div className="flex flex-col gap-2">
            <Button
              onClick={prepareSimulation}
              disabled={loading || isRunning}
              className="flex items-center gap-2"
            >
              <Database className="h-4 w-4" />
              ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏∏‡πà‡∏° 75-150 ‡∏Ñ‡∏¥‡∏ß)
            </Button>
            
            {/* Algorithm Selection Interface */}
            {simulationStats.phase === 'PREPARED' && (
              <AlgorithmSelector
                currentAlgorithm={simulationStats.currentAlgorithm}
                selectedAlgorithm={selectedAlgorithm}
                onAlgorithmChange={setSelectedAlgorithm}
                onStartSimulation={startProgressiveTest}
                disabled={loading}
                isRunning={isRunning}
              />
            )}
          </div>
          
          <Button
            onClick={startProgressiveTest}
            disabled={loading || !canStartTest}
            variant="default"
            className="flex items-center gap-2"
          >
            <Play className="h-4 w-4" />
            {isRunning ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...' : '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤'}
          </Button>

          {/* Decision Point Components - Show intelligent decision interfaces */}
          {/* Phase 1 Decision Point (30%) */}
          {canContinuePhase2 && (
            <div className="col-span-full">
              <DecisionPoint
                phase={30}
                currentAlgorithm={simulationStats.currentAlgorithm}
                currentMetrics={currentMetrics}
                waitingQueues={simulationStats.totalQueues - simulationStats.completedQueues}
                phaseMetrics={simulationStats.algorithmMetrics}
                onContinue={() => continueToPhase2()}
                onChangeAndContinue={(newAlgorithm) => continueToPhase2(newAlgorithm)}
              />
            </div>
          )}

          {/* Phase 2 Decision Point (70%) */}
          {canCompleteSimulation && (
            <div className="col-span-full">
              <DecisionPoint
                phase={70}
                currentAlgorithm={simulationStats.currentAlgorithm}
                currentMetrics={currentMetrics}
                waitingQueues={simulationStats.totalQueues - simulationStats.completedQueues}
                phaseMetrics={simulationStats.algorithmMetrics}
                onContinue={() => completeSimulation()}
                onChangeAndContinue={(newAlgorithm) => completeSimulation(newAlgorithm)}
              />
            </div>
          )}
          
          <Button
            onClick={cleanup}
            disabled={loading}
            variant="destructive"
            className="flex items-center gap-2"
          >
            <Trash2 className="h-4 w-4" />
            ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)
          </Button>
        </div>

        {/* Enhanced Algorithm Comparison Results */}
        {showResults && (
          <>
            <div className="p-4 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg border border-green-200">
              <div className="flex items-center gap-2 mb-4">
                <BarChart3 className="h-4 w-4 text-green-600" />
                <h4 className="font-medium text-green-800">‡∏ú‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</h4>
              </div>
              
              {/* Summary Table */}
              <div className="overflow-x-auto mb-4">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b border-green-200">
                      <th className="text-left p-2 text-green-800">‡πÄ‡∏ü‡∏™</th>
                      <th className="text-left p-2 text-green-800">‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°</th>
                      <th className="text-center p-2 text-green-800">‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</th>
                      <th className="text-center p-2 text-green-800">‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à</th>
                      <th className="text-center p-2 text-green-800">‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</th>
                      <th className="text-center p-2 text-green-800">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°</th>
                    </tr>
                  </thead>
                  <tbody>
                    {simulationStats.algorithmMetrics.map((metric, index) => {
                      const score = Math.round(((100 - metric.avgWaitTime) * 0.4 + metric.throughput * 0.3 + (metric.throughput / Math.max(metric.avgWaitTime, 1)) * 10 * 0.3) * 100) / 100;
                      const isVest = score === Math.max(...simulationStats.algorithmMetrics.map(m => 
                        (100 - m.avgWaitTime) * 0.4 + m.throughput * 0.3 + (m.throughput / Math.max(m.avgWaitTime, 1)) * 10 * 0.3
                      ));
                      
                      return (
                        <tr key={index} className={`border-b border-green-100 ${isVest ? 'bg-green-100' : 'bg-white'}`}>
                          <td className="p-2 font-medium">{metric.phase}</td>
                          <td className="p-2">
                            <span className={`px-2 py-1 rounded text-xs ${
                              metric.algorithm === 'FIFO' ? 'bg-blue-100 text-blue-700' :
                              metric.algorithm === 'PRIORITY' ? 'bg-red-100 text-red-700' :
                              'bg-purple-100 text-purple-700'
                            }`}>
                              {metric.algorithm}
                            </span>
                            {isVest && <span className="ml-2 text-green-600 text-xs">üëë ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</span>}
                          </td>
                          <td className="p-2 text-center">{metric.avgWaitTime} ‡∏ô‡∏≤‡∏ó‡∏µ</td>
                          <td className="p-2 text-center">{metric.completedQueues} ‡∏Ñ‡∏¥‡∏ß</td>
                          <td className="p-2 text-center">{metric.throughput} ‡∏Ñ‡∏¥‡∏ß/‡∏£‡∏≠‡∏ö</td>
                          <td className="p-2 text-center font-bold text-green-700">{score}</td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>

              {/* Performance Insights */}
              <div className="bg-white p-3 rounded border border-green-200">
                <h5 className="font-medium text-gray-800 mb-2">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</h5>
                <div className="text-sm text-gray-600 space-y-1">
                  {simulationStats.algorithmMetrics.length > 0 && (
                    <>
                       <p>‚Ä¢ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö {simulationStats.algorithmMetrics.length} ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡πÉ‡∏ô {simulationStats.algorithmMetrics.length} ‡πÄ‡∏ü‡∏™</p>
                      <p>‚Ä¢ ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: <strong>
                        {simulationStats.algorithmMetrics.reduce((best, current) => {
                          const currentScore = (100 - current.avgWaitTime) * 0.4 + current.throughput * 0.3;
                          const bestScore = (100 - best.avgWaitTime) * 0.4 + best.throughput * 0.3;
                          return currentScore > bestScore ? current : best;
                        }).algorithm}
                      </strong></p>
                      <p>‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: {Math.round(simulationStats.algorithmMetrics.reduce((sum, m) => sum + m.avgWaitTime, 0) / simulationStats.algorithmMetrics.length)} ‡∏ô‡∏≤‡∏ó‡∏µ</p>
                      <p>‚Ä¢ ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏°: {simulationStats.completedQueues} ‡∏à‡∏≤‡∏Å {simulationStats.totalQueues} ‡∏Ñ‡∏¥‡∏ß</p>
                    </>
                  )}
                </div>
              </div>
            </div>
          </>
        )}

        {/* Current Algorithm Status */}
        {simulationStats.phase !== 'IDLE' && (
          <div className="flex items-center gap-2 p-3 bg-blue-50 rounded-lg">
            <Activity className="h-4 w-4 text-blue-600" />
            <span className="text-sm font-medium text-blue-800">
              ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {simulationStats.currentAlgorithm}
            </span>
          </div>
        )}
        {simulationStats.prepared && (
          <>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                <div>
                  <p className="text-sm font-medium text-blue-900">‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                  <p className="text-2xl font-bold text-blue-600">{simulationStats.totalQueues}</p>
                </div>
                <Users className="h-8 w-8 text-blue-500" />
              </div>
              
              <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                <div>
                  <p className="text-sm font-medium text-green-900">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>
                  <p className="text-2xl font-bold text-green-600">{simulationStats.completedQueues}</p>
                </div>
                <Clock className="h-8 w-8 text-green-500" />
              </div>
              
              <div className="flex items-center justify-between p-3 bg-orange-50 rounded-lg">
                <div>
                  <p className="text-sm font-medium text-orange-900">‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</p>
                  <p className="text-2xl font-bold text-orange-600">{simulationStats.avgWaitTime} ‡∏ô‡∏≤‡∏ó‡∏µ</p>
                </div>
                <Activity className="h-8 w-8 text-orange-500" />
              </div>
            </div>

            {/* Queue Type Distribution */}
            {Object.keys(simulationStats.queueTypeDistribution).length > 0 && (
              <div className="p-4 bg-gray-50 rounded-lg">
                <div className="flex items-center gap-2 mb-3">
                  <BarChart3 className="h-4 w-4 text-gray-600" />
                  <h4 className="font-medium text-gray-700">‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏¥‡∏ß</h4>
                </div>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  {Object.entries(simulationStats.queueTypeDistribution).map(([type, count]) => (
                    <div key={type} className="text-center p-2 bg-white rounded border">
                      <div className="text-lg font-bold text-gray-800">{count}</div>
                      <div className="text-xs text-gray-600">{type}</div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </>
        )}

        {/* Status Badges */}
        <div className="flex flex-wrap gap-2">
          {simulationStats.prepared && (
            <Badge variant="secondary">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß</Badge>
          )}
          {isRunning && (
            <Badge variant="default" className="animate-pulse">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á</Badge>
          )}
          {simulationStats.isSimulationMode && (
            <Badge variant="outline" className="border-orange-300 text-orange-700">
              üî¨ ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            </Badge>
          )}
          {simulationStats.completedQueues > 0 && (
            <Badge variant="outline">‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö</Badge>
          )}
        </div>

        {/* Enhanced Instructions */}
        <div className="p-4 bg-gray-50 rounded-lg">
          <h4 className="font-medium mb-2 flex items-center gap-2">
            <AlertTriangle className="h-4 w-4 text-amber-600" />
            ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (Progressive Algorithm Testing):
          </h4>
          <ol className="text-sm space-y-1 text-gray-600">
            <li>1. <strong>‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</strong>: ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏∏‡πà‡∏° 75-150 ‡∏Ñ‡∏¥‡∏ß)</li>
            <li>2. <strong>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö</strong>: ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤ ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà 30% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°</li>
            <li>3. <strong>‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à 30%</strong>: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡πÄ‡∏î‡∏¥‡∏°</li>
            <li>4. <strong>‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à 70%</strong>: ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏ö</li>
            <li>5. <strong>‡∏î‡∏π‡∏ú‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö</strong>: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö</li>
          </ol>
          <div className="mt-2 p-2 bg-amber-50 border border-amber-200 rounded text-xs text-amber-800">
            <strong>‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:</strong> ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default AnalyticsSimulation;
