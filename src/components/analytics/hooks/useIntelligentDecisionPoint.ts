import { useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { createLogger } from '@/utils/logger';

const logger = createLogger('IntelligentDecisionPoint');

export interface QueueAnalysis {
  totalWaiting: number;
  urgentCount: number;
  elderlyCount: number;
  generalCount: number;
  appointmentCount: number;
  avgWaitTimeCurrent: number;
  bottleneckServicePoints: string[];
}

export interface AlgorithmRecommendation {
  recommended: string;
  reason: string;
  expectedImpact: string;
  confidence: 'HIGH' | 'MEDIUM' | 'LOW';
}

export const useIntelligentDecisionPoint = () => {
  // Analyze current queue composition and performance
  const analyzeCurrentQueues = useCallback(async (): Promise<QueueAnalysis> => {
    logger.info('üîç Analyzing current queue composition...');
    
    // Get waiting queues with service point info
    const { data: waitingQueues } = await supabase
      .from('queues')
      .select(`
        *,
        service_points(name, code)
      `)
      .eq('status', 'WAITING')
      .like('notes', '%‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•%');

    // Get active queues to calculate current wait times
    const { data: activeQueues } = await supabase
      .from('queues')
      .select('*')
      .eq('status', 'ACTIVE')
      .like('notes', '%‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•%');

    const totalWaiting = waitingQueues?.length || 0;
    const urgentCount = waitingQueues?.filter(q => q.type === 'URGENT').length || 0;
    const elderlyCount = waitingQueues?.filter(q => q.type === 'ELDERLY').length || 0;
    const generalCount = waitingQueues?.filter(q => q.type === 'GENERAL').length || 0;
    const appointmentCount = waitingQueues?.filter(q => q.type === 'APPOINTMENT').length || 0;

    // Calculate average wait time for active queues
    const avgWaitTimeCurrent = activeQueues?.reduce((sum, queue) => {
      if (queue.called_at && queue.created_at) {
        const wait = (new Date(queue.called_at).getTime() - new Date(queue.created_at).getTime()) / 60000;
        return sum + wait;
      }
      return sum;
    }, 0) / Math.max(activeQueues?.length || 1, 1);

    // Identify bottleneck service points
    const servicePointLoad: Record<string, number> = {};
    waitingQueues?.forEach(queue => {
      if (queue.service_points?.name) {
        servicePointLoad[queue.service_points.name] = (servicePointLoad[queue.service_points.name] || 0) + 1;
      }
    });

    const bottleneckServicePoints = Object.entries(servicePointLoad)
      .filter(([_, count]) => count > 5) // More than 5 waiting queues
      .map(([name, _]) => name);

    return {
      totalWaiting,
      urgentCount,
      elderlyCount,
      generalCount,
      appointmentCount,
      avgWaitTimeCurrent: Math.round(avgWaitTimeCurrent || 0),
      bottleneckServicePoints
    };
  }, []);

  // Generate intelligent algorithm recommendation based on queue analysis
  const generateRecommendation = useCallback((
    currentAlgorithm: string,
    analysis: QueueAnalysis,
    currentMetrics: any
  ): AlgorithmRecommendation => {
    logger.info('ü§ñ Generating intelligent algorithm recommendation...', { currentAlgorithm, analysis, currentMetrics });

    const { urgentCount, elderlyCount, generalCount, totalWaiting, avgWaitTimeCurrent, bottleneckServicePoints } = analysis;
    const { avgWaitTime, throughput } = currentMetrics;

    // High priority queue concentration
    const priorityRatio = (urgentCount + elderlyCount) / Math.max(totalWaiting, 1);
    const isHighPriorityLoad = priorityRatio > 0.3; // More than 30% priority queues

    // Performance issues
    const isSlowProcessing = avgWaitTime > 20 || throughput < 3;
    const hasBottlenecks = bottleneckServicePoints.length > 0;

    // Algorithm-specific recommendations
    if (currentAlgorithm === 'FIFO') {
      if (isHighPriorityLoad) {
        return {
          recommended: 'PRIORITY',
          reason: `‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô/‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ ${urgentCount + elderlyCount} ‡∏Ñ‡∏¥‡∏ß (${Math.round(priorityRatio * 100)}%) - ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç`,
          expectedImpact: `‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å ${avgWaitTimeCurrent} ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ~${Math.max(5, avgWaitTimeCurrent - 8)} ‡∏ô‡∏≤‡∏ó‡∏µ`,
          confidence: 'HIGH'
        };
      } else if (isSlowProcessing && totalWaiting > 15) {
        return {
          recommended: 'MULTILEVEL',
          reason: `‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ñ‡∏¥‡∏ß‡∏°‡∏≤‡∏Å (${totalWaiting} ‡∏Ñ‡∏¥‡∏ß) ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥ - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•`,
          expectedImpact: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° throughput ‡∏à‡∏≤‡∏Å ${throughput} ‡πÄ‡∏õ‡πá‡∏ô ~${throughput + 2} ‡∏Ñ‡∏¥‡∏ß`,
          confidence: 'HIGH'
        };
      }
    } else if (currentAlgorithm === 'PRIORITY') {
      if (!isHighPriorityLoad && generalCount > urgentCount + elderlyCount) {
        return {
          recommended: 'MULTILEVEL',
          reason: `‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô (${generalCount} vs ${urgentCount + elderlyCount}) - ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•`,
          expectedImpact: `‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°`,
          confidence: 'MEDIUM'
        };
      } else if (throughput > 5 && totalWaiting < 10) {
        return {
          recommended: 'FIFO',
          reason: `‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß (${throughput} ‡∏Ñ‡∏¥‡∏ß) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏ô‡πâ‡∏≠‡∏¢ - FIFO ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠`,
          expectedImpact: `‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö`,
          confidence: 'MEDIUM'
        };
      }
    } else if (currentAlgorithm === 'MULTILEVEL') {
      if (isHighPriorityLoad && avgWaitTime > 15) {
        return {
          recommended: 'PRIORITY',
          reason: `‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å (${Math.round(priorityRatio * 100)}%) ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏ô‡∏≤‡∏ô - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç`,
          expectedImpact: `‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏ô‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç`,
          confidence: 'HIGH'
        };
      } else if (totalWaiting < 8 && !hasBottlenecks) {
        return {
          recommended: 'FIFO',
          reason: `‡∏Ñ‡∏¥‡∏ß‡∏ô‡πâ‡∏≠‡∏¢ (${totalWaiting} ‡∏Ñ‡∏¥‡∏ß) ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏≠‡∏Ç‡∏ß‡∏î - FIFO ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°`,
          expectedImpact: `‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠`,
          confidence: 'MEDIUM'
        };
      }
    }

    // Default recommendation - continue with current algorithm
    return {
      recommended: currentAlgorithm,
      reason: `‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå (‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠: ${avgWaitTime} ‡∏ô‡∏≤‡∏ó‡∏µ, throughput: ${throughput} ‡∏Ñ‡∏¥‡∏ß)`,
      expectedImpact: `‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠`,
      confidence: 'MEDIUM'
    };
  }, []);

  // Get contextual insights for the current situation
  const getContextualInsights = useCallback((analysis: QueueAnalysis, currentMetrics: any) => {
    const insights = [];

    if (analysis.urgentCount > 3) {
      insights.push({
        type: 'warning',
        message: `‚ö†Ô∏è ‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô ${analysis.urgentCount} ‡∏Ñ‡∏¥‡∏ß - ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç`
      });
    }

    if (analysis.bottleneckServicePoints.length > 0) {
      insights.push({
        type: 'info',
        message: `üîç ‡∏à‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏ô‡πà‡∏ô: ${analysis.bottleneckServicePoints.join(', ')}`
      });
    }

    if (currentMetrics.avgWaitTime > 25) {
      insights.push({
        type: 'error',
        message: `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å (${currentMetrics.avgWaitTime} ‡∏ô‡∏≤‡∏ó‡∏µ) - ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô`
      });
    }

    if (currentMetrics.throughput < 3) {
      insights.push({
        type: 'warning',
        message: `üìâ ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥ (${currentMetrics.throughput} ‡∏Ñ‡∏¥‡∏ß‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö) - ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`
      });
    }

    return insights;
  }, []);

  return {
    analyzeCurrentQueues,
    generateRecommendation,
    getContextualInsights
  };
};